#summary How to implement the Login UseCase

= Introduction =

Suppose we are building an application that requires users to authenticate using the standard login/password request. Typically, you have some kind of a UseCase specification that describes the steps and explains the happy flow. Clearly, there will be an interaction sequence (conversation) between the user, the application and some authentication service.

= Details =

  # The main application (View) will start the conversation *Login* and tell the conversation *Login* to report to the main application when login was succesfull.
  # The conversation will inspect the Context whether credentials (username, password) are available. 
  # If not, the conversation *Login* will show an input dialog requesting the user to provide this information. 
  # After accepting the input to this dialog, the conversation *Login* will send the login command request using an application server (through a !UserController). The Client will send the request and receive the response and report to the conversation *Login* with the answer (Reply). 
  # The conversation *Login* will store the information (user,logged_in) into the Context and report to the application (View) that the conversation Login is completed. Reporting is done by invoking the handler that was passed when the conversation was started.

= Source Code =
This implementation is copied from an actual Flex project that uses the *Dunelox* library classes.
{{{
package com.cae.user.usecases
{
	import com.philemonworks.flex.dialogs.LoginDialog;
	import flash.display.DisplayObject;
	import com.philemonworks.flex.net.Reply;
	import com.philemonworks.flex.dialogs.MessageDialog;
	import mx.core.Application;
	import com.philemonworks.flex.nls.NLS;
	import com.philemonworks.flex.util.ApplicationContext;
	import com.philemonworks.flex.util.Conversation;
	import com.cae.user.controllers.api.LoginController;
	
	public class Login extends Conversation
	{
		private var _login:String
		private var _dialog:LoginDialog;		

		override protected function begin():void {
			_dialog = LoginDialog.newFor(this.view)
			_dialog.title = NLS.text('title.login')
			_dialog.show(loginOkHandler)
		}
		private function loginOkHandler(dialog:LoginDialog):void {
			this.tryLogin(dialog.userText.text, dialog.passwordText.text)
		}
		private function tryLogin(user:String,password:String):void {
			_login = user
			LoginController(ApplicationContext.current.get("LoginController")).login(user,password,replyHandler)	
		}
		private function replyHandler(reply:Reply):void {
			// always close, creator decides whether to re-open
			if (_dialog != null) _dialog.close()
			if ("denied" == reply.status) {
				MessageDialog.showInformation(
					this.view,
					NLS.expandText('msg.access.denied', [_login] ),
					handleOkDialog)	
				ApplicationContext.current.currentLogin = null
				ApplicationContext.current.currentRole = null
				return				
			}
			ApplicationContext.current.currentLogin = _login
			ApplicationContext.current.currentRole = reply.result as String
			this.end()
		}
		private function handleOkDialog(dialog:MessageDialog):void {
			dialog.close()
			this.begin()
		}		
	}
}
}}}
To start the Login conversation in the Application component.
{{{
new Login().start(this, handleLoginOk)

private function handleLoginOk(cvs:Login):void {
     // now we are logged in
}
}}}