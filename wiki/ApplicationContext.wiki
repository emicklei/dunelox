#summary An Application Context be used to store bindable cross-component model objects

= Introduction =

When building large Flex applications it is a good practice to separate functionality into different Flex Library components (swc). If your design requires shared objects created in your component that need to be available to the containing application, then you need a shared context. Class ApplicationContext provides this functionality by providing a current sole instance to the application and all its required components. In addition, each context entry is *Bindable*. This means that if the value of the entry changes, all bound UI components will be notified and are updated.

{{{
ApplicationContext.current.put('shoppingCard', aShoppingCard)
}}}

== Extra Fields ==
In addition to be a generic context, the current ApplicationContext also provides the extra fields *currentUser*, *currentRole* and *DEBUG*. The currentUser and currentRole can be used to store user information that needs to be available throughout your application. For instance, the Authorizer can use this to apply its authorisation rules.
The DEBUG Boolean value is typically used to enabling debugging information to show in logs or on your views. It was introduced to deal with testing against local WebServices in development versus the remote WebServices when deployed in the production environment. 

== Simplified Access ==
The second example uses the helper class !AppCtx. This helper has been introduced to deal with a Binding related warning by the compiler. When the expression "!ApplicationContext.current" is used in MXML, the compiler will warn you that assignments to "current" will not be visible. And because these assignment will never occur (Singleton), the warning can be ignored. However, if you really are aiming at getting your warnings down to zero then the *!AppCtx* can help you. Another benefit of using this class is that the code is more compact without losing readability.

Initialize the context in your application:
{{{
AppCtx.put('country.names', ["Africa", "Bulgaria", "Chilli", "Denmark" ,...])
}}}
and use it in your visual components:
{{{
<mx:ComboBox dataProvider="{AppCtx.get('country.names')}" />
}}}