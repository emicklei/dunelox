<?xml version="1.0" encoding="utf-8"?>
<!-- 	Test$class$Form is generated by Flexolop FlexGenerator on $timestamp$ -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:views="$packageroot$.views.*"
	creationComplete="refresh()">
	<mx:VBox top="4" left="4">
		<mx:HBox backgroundColor="#ffff80" width="100%">
			<mx:Label text="Test $class$ Form" fontWeight="bold" fontSize="14"/>
			<mx:Button label="&lt;&lt;" click="doPrevious()"/>
			<mx:TextInput width="38" id="current_id" focusOut="goto()" text="{$model$_id}" />
			<mx:Button label="&gt;&gt;" click="doNext()" />			
			<mx:Button label="Popup" click="doPopup()"/>
		</mx:HBox>
		<views:$class$Form id="form" $model$Save="save$class$(event)" $model$Revert="revert$class$(event)"/>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import $packageroot$.views.$class$TitleWindow;
			import $packageroot$.models.$class$;
			import $packageroot$.controllers.api.$class$Controller;
			import $packageroot$.controllers.impl.$class$ControllerClient;
			import mx.rpc.events.ResultEvent;
			import com.philemonworks.flex.net.Reply;
			import com.philemonworks.flex.events.ObjectDataEvent;
				
			private var controller:$class$Controller = new $class$ControllerClient("$testbaseurl$/");				
			[Bindable]
			private var $model$_id:int = 1;
			
			private function doNext():void { $model$_id++ ; refresh() }
			private function doPrevious():void { $model$_id-- ; refresh() }
			private function goto():void { $model$_id = int(current_id.text) ; refresh() }						
			
			private function refresh():void {
				controller.find(String($model$_id),populate$class$)
			}
			private function populate$class$($model$:XML):void {
				form.$model$ = new $packageroot$.models.$class$($model$)
			}
			private function doPopup():void {
				if (form.$model$ == null) {
					Alert.show("No $model$ available (yet)")
					return
				}			
				$class$TitleWindow.popup(this,form.$model$,true).addEventListener("saveRequested", save$class$)
			}
			private function save$class$(event:ObjectDataEvent):void {
				controller.saveOrUpdate($packageroot$.models.$class$(event.data).toXML(), saveReplyHandler)
			}	
			private function revert$class$(event:ObjectDataEvent):void {
				controller.(String(event.data),populate$class$)
			}					
			private function saveReplyHandler(reply:Reply):void {
				
			}						
		]]>
	</mx:Script>
</mx:Application>