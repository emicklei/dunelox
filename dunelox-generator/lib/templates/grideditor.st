<?xml version="1.0" encoding="utf-8"?>
<!-- 	$class$GridEditor is generated by Flexolop FlexGenerator on $timestamp$ -->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="800" height="600" xmlns:ns1="$packageroot$.views.*" creationComplete="doRefresh()">
	<mx:HBox width="100%" height="100%" >
		<mx:VBox>
			<mx:Button label="{NLS.text('create','Create')}" width="100" click="doCreate()" />
			<mx:Button label="{NLS.text('copy','Copy')}" width="100" click="doCopy()" enabled="{table.grid.selectedIndex != -1}"/>			
			<mx:Button label="{NLS.text('modify','Modify')}" width="100" click="doModify()" enabled="{table.grid.selectedIndex != -1}"/>
			<mx:Button label="{NLS.text('delete','Delete')}" width="100" click="doDelete()" enabled="{table.grid.selectedIndex != -1}"/>
			<mx:Button label="{NLS.text('clip','Clip')}" width="100" click="table.doClip()" />
			<mx:Button label="{NLS.text('refresh','Refresh')}" width="100" click="doRefresh()" />
		</mx:VBox>
		<ns1:$class$Grid id="table" width="100%" height="100%" />	
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import com.philemonworks.flex.events.ObjectDataEvent;		
			import com.philemonworks.flex.net.Reply;
			import com.philemonworks.flex.util.XMLHelper;
			import com.philemonworks.flex.nls.NLS;

			import $packageroot$.views.$class$TitleWindow;
			import $packageroot$.controllers.api.$class$Controller;
			import $packageroot$.models.$class$;
			
			public var controller:$class$Controller;
			
			// Buttons
			
			public function doRefresh():void {
				if (controller == null) {
					trace("[$class$GridEditor] no controller set")
					return
				}
				table.navigator.refresh()
			}						
			public function doCreate():void {
				var $model$:$packageroot$.models.$class$ = new $packageroot$.models.$class$()
				this.openEditor($model$)
			}
			public function doCopy():void {
				controller.find(XML(table.grid.selectedItem).id,editCopyHandler)				
			}			
			public function doModify():void {
				controller.find(XML(table.grid.selectedItem).id,editHandler)
			}
			public function doDelete():void {
				controller.destroy(XML(table.grid.selectedItem).id, replyHandler)
			}
			
			// Handlers

			public function allReceivedHandler($model$ListXML:XML):void {
				table.grid.dataProvider = $model$ListXML['$modeltag$']
			}						
			public function editHandler($model$XML:XML):void {
				var $model$:$packageroot$.models.$class$ = new $packageroot$.models.$class$($model$XML)
				this.openEditor($model$)
			}
			public function editCopyHandler($model$XML:XML):void {
				var $model$:$packageroot$.models.$class$ = new $packageroot$.models.$class$($model$XML)
				$model$.id = 0 // make it new
				this.openEditor($model$)
			}
			public function openEditor($model$:$packageroot$.models.$class$):void {
				var window:$class$TitleWindow = $class$TitleWindow.popup(this,$model$,false)
				window.form.addEventListener("$model$Save" , saveRequestHandler)
			}
			private function saveRequestHandler(event:ObjectDataEvent):void {
				controller.saveOrUpdate($packageroot$.models.$class$(event.data).toXML(),replyHandler)
			}						
			public function replyHandler(reply:Reply):void {
				this.doRefresh()
			}			
		]]>
	</mx:Script>
	
</mx:Canvas>
